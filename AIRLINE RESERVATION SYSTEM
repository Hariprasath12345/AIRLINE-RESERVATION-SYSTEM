import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
class LoginType extends JPanel {
BoxLayout boxlayout = new BoxLayout(this, BoxLayout.Y_AXIS);
JButton customer_login = new JButton("Customer Login");
JButton airline_login = new JButton("Airline Login");
LoginType() {
this.customer_login.setAlignmentX(CENTER_ALIGNMENT);
this.airline_login.setAlignmentX(CENTER_ALIGNMENT);
this.setLayout(boxlayout);
this.setBorder(new EmptyBorder(new Insets(100, 150, 100,
150)));
}
this.add(customer_login);
this.add(airline_login);
}
class LoginPage extends JPanel {
static String login_type = "";
BoxLayout boxlayout = new BoxLayout(this, BoxLayout.Y_AXIS);
JTextField user_name = new JTextField(16);
JTextField password = new JTextField(16);
JButton login_button = new JButton("Login");
JLabel label = new JLabel("Enter "+login_type+" Login");
LoginPage() {
this.user_name.setAlignmentX(CENTER_ALIGNMENT);
this.password.setAlignmentX(CENTER_ALIGNMENT);
this.login_button.setAlignmentX(CENTER_ALIGNMENT);
this.label.setAlignmentX(CENTER_ALIGNMENT);
this.setLayout(boxlayout);
this.setBorder(new EmptyBorder(new Insets(100, 150, 100,
150)));
}
this.add(user_name);
this.add(password);
this.add(login_button);
this.add(label);

}
class Booking extends JPanel {
BoxLayout boxlayout = new BoxLayout(this, BoxLayout.Y_AXIS);
JLabel l1 = new JLabel("Name");
JTextField name = new JTextField(16);
JLabel l2 = new JLabel("Flight");
JTextField flight = new JTextField(16);
JLabel l3 = new JLabel("Seat No");
JTextField seat_no = new JTextField(16);
JButton booking_button = new JButton("Book Tickets");
JButton view_tickets = new JButton("View Ticket");
Booking() {
this.l1.setAlignmentX(LEFT_ALIGNMENT);
this.name.setAlignmentX(CENTER_ALIGNMENT);
this.l2.setAlignmentX(LEFT_ALIGNMENT);
this.flight.setAlignmentX(CENTER_ALIGNMENT);
this.l3.setAlignmentX(LEFT_ALIGNMENT);
this.seat_no.setAlignmentX(CENTER_ALIGNMENT);
this.booking_button.setAlignmentX(CENTER_ALIGNMENT);
this.view_tickets.setAlignmentX(CENTER_ALIGNMENT);
this.setLayout(boxlayout);
this.setBorder(new EmptyBorder(new Insets(100, 150, 100,
150)));
}
this.add(l1);
this.add(name);
this.add(l2);
this.add(flight);
this.add(l3);
this.add(seat_no);
this.add(booking_button);
this.add(view_tickets);
}
class Ticket extends JPanel {
BoxLayout boxlayout = new BoxLayout(this, BoxLayout.Y_AXIS);
static boolean tickets_booked = false;
static String name;
static String flight;
static String seat_no;
JLabel n = new JLabel();
JLabel f = new JLabel();
JLabel s = new JLabel();
JLabel l = new JLabel();
JButton home = new JButton("Back to login");

void update_ticket() {
this.setLayout(boxlayout);
this.setBorder(new EmptyBorder(new Insets(100, 150, 100,
150)));
if(tickets_booked==false) {
l.setText("Tickets not booked");
l.setAlignmentX(CENTER_ALIGNMENT);
home.setAlignmentX(CENTER_ALIGNMENT);
this.add(l);
this.add(home);
}
else if (tickets_booked==true) {
n.setText(name);
f.setText(flight);
s.setText(seat_no);
l.setText("Tickets Booked");
n.setAlignmentX(CENTER_ALIGNMENT);
f.setAlignmentX(CENTER_ALIGNMENT);
s.setAlignmentX(CENTER_ALIGNMENT);
l.setAlignmentX(CENTER_ALIGNMENT);
home.setAlignmentX(CENTER_ALIGNMENT);
this.add(n);
this.add(f);
this.add(s);
this.add(l);
this.add(home);
}
}
}
public class AirlineReservation implements ActionListener {
static JFrame frame;
static LoginType lt;
static LoginPage lp;
static Booking bk;
static Ticket tk = new Ticket();
static AirlineReservation main_class;
public static void main(String[] args) {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())
;
}
catch(Exception e) {
System.out.println("Invalid Platform.");
}

main_class = new AirlineReservation();
frame = new JFrame("AirlineReservation");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
lt = new LoginType();
lt.customer_login.addActionListener(main_class);
lt.airline_login.addActionListener(main_class);
tk.home.addActionListener(main_class);
tk.update_ticket();
frame.add(lt);
frame.pack();
frame.setVisible(true);
}
@Override
public void actionPerformed(ActionEvent e) {
String s = e.getActionCommand();
switch (s) {
case "Customer Login":
lp.login_type = "customer";
lp = new LoginPage();
lp.login_button.addActionListener(this);
frame.remove(lt);
frame.add(lp);
frame.pack();
break;
case "Airline Login":
lp.login_type = "airline";
lp = new LoginPage();
lp.login_button.addActionListener(this);
frame.remove(lt);
frame.add(lp);
frame.pack();
break;
case "Login":
String un = lp.user_name.getText();
String pw = lp.password.getText();
if(lp.login_type.equals("customer")&&un.equals("passenger")&&pw.equ
als("123")){
tk.update_ticket();
frame.remove(lp);
frame.add(tk);
frame.pack();
}
if(lp.login_type.equals("airline")&&un.equals("staff")&&pw.equals("
123")){
bk = new Booking();

bk.booking_button.addActionListener(this);
bk.view_tickets.addActionListener(this);
frame.remove(lp);
frame.add(bk);
frame.pack();
}
Password.");
else {
lp.label.setText("Invalid Username and
} break;
case "Book Tickets":
tk.tickets_booked = true;
tk.name = "Name: "+bk.name.getText();
tk.flight = "Flight: "+bk.flight.getText();
tk.seat_no = "Seat No: "+bk.seat_no.getText();
tk.update_ticket();
frame.remove(bk);
frame.add(tk);
frame.pack();
break;
case "Back to login":
frame.remove(tk);
frame.add(lt);
frame.pack();
break;
case "View Ticket":
tk.update_ticket();
frame.remove(bk);
frame.add(tk);
frame.pack();
break;
default:
break;
}
}
}
